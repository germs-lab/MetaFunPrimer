#!/bin/bash

# Prepares blast jobs to search for sequences within environments
# Usage: mfpdesign -i protein_fasta -e env_directory [options,,,]
# Input:
#	primer_targets: an aligned fasta file with N characters removed
#	env_directory: a directory containing the metagenomes to search against.
# Outputs:
#	primer_targets.primers.out: the raw output from RDP's PrimerDesign software
#	primer_targets.primers.fa: the probes from RDP's PrimerDesign software formatted
# 		as a fasta file
# Example: bash design_primers.sh abundant_genes_nucleotide.aligned.noN.fa 


bold=$(tput bold)
normal=$(tput sgr0)

primer_targets=$1

die() {
	printf 'ERROR: %s\nExiting...' "$1" >&2
	exit 1
}


usage() {
cat << EOF 

${bold}MetaFunPrimer: Search${normal}
	Prepares and submits BLAST searches of an input file against a directory
	of metagenome files.

${bold}Usage:${normal}
	mfpdesign -i <protein_sequences> -e <env_directory> [options...]

${bold}Inputs:${normal}
	- protein_sequences: Fasta format file containing primer pairs for testing
	- env_directory: Directory containing reference files

${bold}Outputs:${normal}
	- a directory (default: protein_sequences.diamond_results) containing:
		- <protein_sequences>.diamond: a DIAMOND blast database
		- *.m8: DIAMOND results for each of the reference files in 
			<env_directory>
		- a directory diamond_commands, containing:
			- commands.diamond.txt: a newline-separated document containing all
				DIAMOND blast commands of the reference fastas contained in 
				<env_directory> against <protein_sequences>.diamond
			- job.diamond.xxx.sb: job submission scripts made from separating 
				commands.diamond.txt into smaller chunks. 
			- job.checklist.tsv: a tsv containing the job number (corresponding
				to a job.diamond.xxx.sb fie) and the time when the job was submitted,
				started, and completed.

${bold}Example:${normal}
	mfpcluster -i fungene_9.6_amoA_AOB_1205_unaligned_protein_seqs.fa 

${bold}Options:${normal}
	${bold}-i, --in <filename>${normal}	
		Fasta format file containing primer pairs for testing
	${bold}-e, --env <filename>${normal}	
		Fasta format file containing reference sequences
	${bold}-o, --out <filename>${normal}	
		String filename for where to save results. Defaults to <input_fasta>.products
	${bold}-h, --help${normal}	
		Display this message
EOF
}

if (($# == 0)); then
	usage
	exit 1
fi


while getopts ":hi:o:b:e:-:" opt; do
  case ${opt} in
	h ) 
		usage
		echo "Exiting..."
		exit 1
      	;;
	o )
		outdir=$OPTARG
	;;	
	i )
		input_file=$OPTARG
	;;
	e ) 
		env_dir=$OPTARG
	;;
	- )	
		LONG_OPTARG="${OPTARG#*\s}"
		case ${OPTARG} in
			in )
				echo "$OPTARG"	
				eval "input_file=\"\$$OPTIND\""
				if [ -z "input_file" ]; then
					echo "Input file required for argument --in" >&2; exit 2
				fi
				# if [ ! -f "input_file" ]; then
				# 	echo "Input file $input_file does not exist." >&2; exit 2
				# fi
				shift
			;;
			env )
				echo "$OPTARG"	
				eval "env_dir=\"\$$OPTIND\""
				if [ -z "env_dir" ]; then
					echo "Input file required for argument --in" >&2; exit 2
				fi
				# if [ ! -f "env_dir" ]; then
				# 	echo "Input file $env_dir does not exist." >&2; exit 2
				# fi
				shift
			;;
			out )	
				eval "outdir=\"\$$OPTIND\""
				if [ -z "outdir" ]; then
					echo "Output directory required for argument --out" >&2; exit 2
				fi
				# if [ ! -f "input_file" ]; then
				# 	echo "Input file $input_file does not exist." >&2; exit 2
				# fi
				shift
			;;
			help ) 
				usage
				exit 1
			;;
			* )
				echo "Invalid option: $LONG_OPTARG"
				usage
				exit 1
			;;

		esac
	;;
    	\? )
		echo "Invalid option: $OPTARG"
		usage
		exit 1
      	;;
  esac
done

if [ ! "$outdir" ]
then
    outdir="$input_file.diamond_results"
fi

if [ ! "$env_dir" ]
then
	die "Environment directory required [-e | --env]"
fi

echo "Input: $input_file"
echo "Environment: $env_dir"
echo "Output directory: $outdir"

if [ ! -d "$outdir" ]
then
	mkdir $outdir
fi
cd $outdir

# Make dbs
printf "\nMaking DIAMOND database...\n\n"

diamond makedb --in ../$input_file -d $input_file

printf "\nDatabase created."

mkdir diamond_commands
cd diamond_commands

printf "\nCreating job commands..."

for fin in $env_dir/*.{fasta,fa,fastq,faa}
do
	echo "diamond blastx --db ../$input_file --query $fin --out ../$(basename $fin).m8 --id 96"
done > commands.diamond.txt

split -a 3 -dl 20 --additional-suffix=.sb commands.diamond.txt job.diamond.

for fin in *.sb
do
	current_job=$(echo $fin | cut -d '.' -f 3)
	printf "%s\n\n%s\n\n" "$(job_header $current_job)" "$(cat $fin)" > $fin
	echo "update_job_status $current_job \"Finished: \$(date +'%H:%M %m\/%d\/%y')\"" >> $fin
	echo "$current_job" >> job.checklist.tsv
done

printf "\nDone."
printf "\nSubmitting jobs..."

for fin in *.sb
do 
	current_job=$(echo $fin | cut -d '.' -f 3)
	#qsub $fin
	update_job_status $current_job "Submitted: $(date +'%H:%M %m\/%d\/%y')" 
	sleep 0.25
done

echo "Done."
