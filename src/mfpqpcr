#!/bin/bash

# Performs in silico PCR to determine effectiveness and specificity
# Usage: mfpqpcr -i primer_fasta -t target_gene_fasta [options,,,]
# Input:
#	primer_fasta: an primer fasta summarized from rdp output (format of the primer ID need to meet the request of `get_pcr_product.py`)
#	target_gene_fasta: a nucleotide fasta with the genes that the primers can potentially target 
# Outputs:
#	primer_targets.primers.out: the raw output from RDP's PrimerDesign software
#	primer_targets.primers.fa: the probes from RDP's PrimerDesign software formatted
# 		as a fasta file
# Example: bash design_primers.sh abundant_genes_nucleotide.aligned.noN.fa 


bold=$(tput bold)
normal=$(tput sgr0)

primer=$1
target=$2


die() {
	printf 'ERROR: %s\n' "$1" 
    	printf 'See mfpqpcr -h for help.\n' >&2
	exit 1
}

usage() {
cat << EOF 

${bold}MetaFunPrimer: qPCR${normal}
    Performs in silico qPCR to determine effectiveness and specificity of
	of primers.

${bold}Usage:${normal}
	mfpqpcr -i <primers.fa> -t <targets.fa> [options...]

${bold}Inputs:${normal}
	- primers.fa: Fasta format file containing primer pairs for testing
	- targets.fa: Fasta format file containing nucleotide sequences of genes that can potentially be targeted by primers

${bold}Outputs:${normal}

${bold}Example:${normal}
	mfpqpcr -i primers.fa -t targets.fa

${bold}Options:${normal}
	${bold}-i, --in <filename>${normal}	
		Fasta format file containing primer pairs for testing
	${bold}-t, --target <filename>${normal}	
		Fasta format file containing nucleotide sequences that can potentially be targeted by primers
	${bold}-o, --out <filename>${normal}	
		String filename for where to save results. Defaults to <input_fasta>.products
	${bold}-h, --help${normal}	
		Display this message
EOF
}

if (($# == 0)); then
	usage
	exit 1
fi


while getopts ":hi:o:t:-:" opt; do
  case ${opt} in
	h ) 
		usage
		exit 1
    ;;
	o )
		outdir=$OPTARG
	;;	
	i )
		input_file=$OPTARG
	;;
	t ) 
		target=$OPTARG
	;;
	- )	
		LONG_OPTARG="${OPTARG#*\s}"
		case ${OPTARG} in
			in )
				eval "input_file=\"\$$OPTIND\""
				if [ -z "$input_file" ]; then
					die "Input file (primer sequences) required for argument --in"
				fi
				if [ ! -f "$input_file" ]; then
					die "Input file $input_file does not exist." 
				fi
				shift
			;;
			target )
				eval "target=\"\$$OPTIND\""
				if [ -z "$target" ]; then
					die "Input required for argument --target"
				fi
				# if [ ! -f "env_dir" ]; then
				# 	echo "Input file $env_dir does not exist." >&2; exit 2
				# fi
				shift
			;;
			out_dir )	
				eval "outdir=\"\$$OPTIND\""
				if [ -z "$outdir" ]; then
					die "Output directory required for argument --out_dir" 
				fi
				# if [ ! -f "input_file" ]; then
				# 	echo "Input file $input_file does not exist." >&2; exit 2
				# fi
				shift
			;;
			out_file )
				eval "output_file=\"\$$OPTIND\""
				if [ -z "$output_file" ]; then
					die "Output file name is required for argument --out_file"
				fi
			;;
			help ) 
				usage
				exit 1
			;;
			* )
				die "Invalid option: $LONG_OPTARG"
			;;

		esac
	;;
    	\? )
		    die "Invalid option: $OPTARG"
      	;;
  esac
done

if [ ! "$input_file" ]; then
	die "Input file (primer sequences) required [-i | --in]"
fi

if [ ! -f "$input_file" ]; 
then
	die "Primers input $target does not exist."
fi


if [ ! "$outdir" ]
then
	outdir="$input_file.pcr_results"
fi

if [ ! -d "$outdir" ]
then
	mkdir $outdir
fi



if [ ! "$target" ]
then
	die "Target genes required [-t | --target]"
fi

if [ ! -f "$target" ]
then
	die "Target genes input $target does not exist."
fi


echo "Input: $input_file"
echo "Target: $target"
echo "Output directory: $outdir"


#cd $outdir

if [ ! "$output_file" ]
then
	output_file="$input_file.out"
fi
echo "The current working directory: $PWD"

#DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
#echo "The script directory: $DIR"
#python "$DIR/modi_get_pcr_product.py" "$input_file" "$target" > "$outdir/$output_file"
#modi_get_pcr_product.py "$input_file" "$target" > "$outdir/$output_file"

get_pcr_product.py "$input_file" "$target" > temp

# this script will generate a file mfpqpcr.log which contains the genes that can be targeted by the final primer sets
filter_primers_output.py temp > temp_out1

# this is the output primer nucleotide sequence fasta file
awk 'BEGIN{FS="\t"; OFS="\n";} {if (NF==5) print ">"$1, $2, ">"$3, $4; }' temp_out1 > "$outdir/$output_file.fa"

# this is the complete output file including information such as primer pair, product length, and genes that can be target by each primer pair
mv temp_out1 "$outdir/$output_file"

# this is the total number of genes that can be targeted by final primer sets
numTar="$(sed -n '$=' mfpqpcr.log)"

# this is the total number of input target genes 
nGene="$(sed -n '$=' $target)"
numGene=$(($nGene / 2))	#should always be an integer

# this is the percentage of genes that primer sets can target
perc=$(echo "${numTar}/${numGene}*100" | bc -l)
sim_perc=$(printf "%.2f" $perc)

seps="--------------------------------------------------"
sed "1 s/^/The resulting primer set amplifies $numTar out of $numGene ($sim_perc%) target genes:\n$seps\n/" mfpqpcr.log > "$outdir/mfpqpcr.log"

sed -i "1 i MetaFunPrimer: qPCR\n-i: "$input_file"\n-t: "$target"" "$outdir/mfpqpcr.log"

rm mfpqpcr.log

rm temp

