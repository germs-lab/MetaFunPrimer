#!/bin/bash

# Summarizes results of a directory of *.m8 files.
# Usage: mfpdesign -i protein_fasta -e env_directory [options,,,]
# Input:
#	primer_targets: an aligned fasta file with N characters removed
#	env_directory: a directory containing the metagenomes to search against.
# Outputs:
#	primer_targets.primers.out: the raw output from RDP's PrimerDesign software
#	primer_targets.primers.fa: the probes from RDP's PrimerDesign software formatted
# 		as a fasta file
# Example: bash design_primers.sh abundant_genes_nucleotide.aligned.noN.fa 


bold=$(tput bold)
normal=$(tput sgr0)

die() {
	printf 'ERROR: %s\n' "$1" 
    printf 'See mfpsearch -h for help.' >&2
	exit 1
}

usage() {
cat << EOF 

${bold}MetaFunPrimer: Count${normal}
	Summarizes a directory of DIAMOND results by counting the presence and 
	abundance of genes.

${bold}Usage:${normal}
	mfpdesign -i <input_dir> [options...] 

${bold}Inputs:${normal}
	- input_dir: Directory containing *.m8 files

${bold}Outputs:${normal}
    - summary.tsv: tsv with columns gene name, richness and abundance

${bold}Example:${normal}
	mfpcluster -i fungene_9.6_amoA_AOB_1205_unaligned_protein_seqs.fa 

${bold}Options:${normal}
	${bold}-i, --in <filename>${normal}	
		Fasta format file containing primer pairs for testing
	${bold}-o, --out <filename>${normal}	
		String filename for where to save results. Defaults to <input_fasta>.products
    
	${bold}-h, --help${normal}	
		Display this message
EOF
}

if (($# == 0)); then
	usage
	exit 1
fi


while getopts ":hi:o:b:e:-:" opt; do
  case ${opt} in
	h ) 
		usage
		exit 1
      	;;
	o )
		outdir=$OPTARG
	;;	
	i )
		input_dir=$OPTARG
	;;
	- )	
		LONG_OPTARG="${OPTARG#*\s}"
		case ${OPTARG} in
			in )
				echo "$OPTARG"	
				eval "input_dir=\"\$$OPTIND\""
				if [ -z "input_dir" ]; then
					die "Input file required for argument --in"
				fi
				if [ ! -f "input_dir" ]; then
					die "Input file $input_dir does not exist." 
				fi
				shift
			;;
			out )	
				eval "outdir=\"\$$OPTIND\""
				if [ -z "outdir" ]; then
					die "Output directory required for argument --out"
				fi
				shift
			;;
			help ) 
				usage
				exit 1
			;;
			* )
				die "Invalid option: $LONG_OPTARG"
			;;
		esac
	;;
    	\? )
		die "Invalid option: $OPTARG"
      	;;
  esac
done

if [ ! "$input_dir" ]
then
    die "Input directory required"
fi

thresh=0.80

echo "Input directory: $(readlink -f $input_dir)"
shortdir=$(readlink -f $input_dir | rev | cut -d '/' -f 1 | rev)

echo "MetaFunPrimer: Count" > $shortdir.log
echo "Input directory: $(readlink -f $input_dir)" >> $shortdir.log
echo "Cumulative abundance threshold: $thresh" >> $shortdir.log
echo "Summary file: $shortdir.summary.tsv" >> $shortdir.log

join -j 1 -t '	' <(count_richness $input_dir | sort -k 1) <(count_abundance $input_dir | sort -k 1) > "$shortdir.summary.tsv"

# sorting by newS
calc_sscore "$shortdir.summary.tsv" | sort -nrk 4 > temp 

cumulative_abundance temp > "$shortdir.summary.tsv"  

# sorting by fo_diff
sort -nrk 3 "$shortdir.summary.tsv" > temp 

fo_diffs temp > "$shortdir.summary.tsv" 
 cumulative_abundance "$shortdir.summary.tsv" > temp  && mv temp "$shortdir.summary.tsv"

# Make recommendations

# Find threshold for S score
#TODO: Finish the separate thresholding utility with user input threshold and sorting column
sort -nrk 4 "$shortdir.summary.tsv" | while read -r gene richness abundance s_score scum fodiff fcum
do
    echo "$gene"
    if [[ $scum > 0.80 ]]; then
        break
    fi
done > $shortdir.recommended_clusters.s_score  

echo "Number of recommended clusters when using s-score: $(cat $shortdir.recommended_clusters.s_score | wc -l)" >> $shortdir.log

# Find thrsehold for fo difference
sort -nrk 3 "$shortdir.summary.tsv" | while read -r gene richness abundance s_score scum fodiff fcum
do
    echo "$gene"
    if [[ $scum > 0.80 ]]; then
        break
    fi
done > $shortdir.recommended_clusters.fo_diffs 

echo "Number of recommended clusters when using first-order differences: $(cat $shortdir.recommended_clusters.fo_diffs | wc -l)" >> $shortdir.log

echo "Recommended next command: mfpprepare -n path/to/nucleotide_fasta -p path/to/protein_fasta -c path/to/cluster/file -t $shortdir.recommended_clusters.\* -m path/to/protein_nucleotide_map" >> $shortdir.log
