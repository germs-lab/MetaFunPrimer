#!/bin/bash

# Performs clustering and determines optimal inclusion threshold of sequences
# Usage: bash clustering-script.sh input_fasta
# Input:
#	input_fasta:  An input file of unaligned protein sequences
#	metagenome_directory: A directory containing all of the metagenomes
#		in *.fa, *.fna, *.fastq, *.fasta formats.
# Outputs:
#	- A directory containing all the clustering information at varying
#	percents 
#	- Within that directory, a cluster_counts.tsv, a tsv  with columns 
# 	with similarity threshhold, number of clusters, and 
#	first-order differences
# Example: bash clustering-script.sh fungene_9.6_amoA_AOB_1205_unaligned_protein_seqs.fa /mnt/gs18/scratch/users/summer90/metaPipeSubTest
# Example (unit test): bash clustering-script.sh -i tests/targets/target_genes_prot.fa -d tests/metagenomes/

# cat ~/docs/projects/MetaFunPrimer/src/logo.txt

bold=$(tput bold)
normal=$(tput sgr0)

usage() {
cat << EOF 

${bold}MetaFunPrimer: Cluster${normal}
	Performs clustering of the input sequence file

${bold}Usage:${normal}
	mfpcluster -i <input_fasta> <[options]> 

${bold}Inputs:${normal}
	- input_fasta: An input file of unaligned protein sequences

${bold}Outputs:${normal}
	- <input_fasta>.clustering_info - A directory containing:
		- Clustering information of the input fasta sequences at various
			percents
		- cluster_counts.tsv - tsv with number of clusters and first-order
			differences at various similarity thresholds
		- <input_fasta>.log: diagnostics from the run of mfpcluster

${bold}Example:${normal}
	mfpcluster -i fungene_9.6_amoA_AOB_1205_unaligned_protein_seqs.fa 

${bold}Options:${normal}
	-h, --help	Display this message
	-i, --in	Input file
	-o, --out	Output directory (Default: Input_file.sequences)

EOF
}

if (($# == 0)); then
	usage
	exit 1
fi

while getopts ":hi:o:-:" opt; do
  case $opt in
	h ) 
		usage
		exit 1
      	;;
	o )
		outdir=$OPTARG
	;;	
	i )
		input_file=$OPTARG
	;;
	- )	
		LONG_OPTARG="${OPTARG#*=}"
		case $OPTARG in
			in )	
				echo "\"\$$OPTIND\""
				eval "input_file=\"\$$OPTIND\""
				if [ -z "$input_file" ]; then
					echo "Input file required for argument --in" >&2; exit 2
				fi
				# if [ ! -f "input_file" ]; then
				# 	echo "Input file $input_file does not exist." >&2; exit 2
				# fi
				#OPTIND=$((OPTIND+1)) 
				shift
			;;
			out )	
				echo "$OPTARG"	
				eval "outdir=\"\$$OPTIND\""
				if [ -z "$outdir" ]; then
					echo "Output directory required for argument --out" >&2; exit 2
				fi
				# if [ ! -f "input_file" ]; then
				# 	echo "Input file $input_file does not exist." >&2; exit 2
				# fi
				#OPTIND=$((OPTIND+1)) 
				shift
			;;
			help ) 
				usage
				exit 1
			;;
			* )
				echo "Invalid option: $LONG_OPTARG"
				usage
				exit 1
			;;

		esac
	;;
    	\? )
		echo "Invalid option: $OPTARG"
		usage
		exit 1
      	;;
  esac
done

# Check if input file is entered
# echo "Input file: $input_file"
if [ !  "$input_file" ]
then
	echo "Error: Input file required."	
	echo "Usage: mfpcluster -i <input_file>"
	exit 1
fi

# Check outdirectory - if none supplied, automatically make one
if [ ! "$outdir" ]
then
	outdir="$input_file.clustering"
fi

if [ ! -d "$outdir" ]
then
	mkdir $outdir
fi

echo "Input file: $input_file"
echo "Output directory: $outdir"

cd $outdir 

printf "MetaFunPrimer: Cluster\nInput file: $input_file\nRun started: $(date)\n" > $input_file.log

for perc_ident in $(seq 0.8 0.01 1); 
do
	# echo "Percent identity: $perc_ident"
	echo "cd-hit -i ../$input_file -o $perc_ident.fa -c $perc_ident -n 5 -T 0 > /dev/null" 
done > command.cluster.sh

echo "Beginning clustering..."

# TODO: Need to silence parallel notice manually for now. Fix later.
cat command.cluster.sh | /mnt/research/germs/softwares/parallel-20181022/src/parallel 

echo "Clustering done."
echo ""
echo "Getting cluster counts by similarity threshold > cluster_counts.tsv"

for fin in $(ls *.clstr | sort -nr);
do
        echo "$(echo $fin | cut -d '.' -f 1,2)	$(cat $fin | grep -c ^">")"
done > cluster_counts.tsv

echo "Calculating first-order differences > cluster_counts.tsv"

# cat cluster_counts.tsv | awk -F "\t" 'BEGIN {OFS="\t"} {sum += $2; print $1 OFS $2 OFS sum}' > temp 

cat cluster_counts.tsv | awk -F "\t" 'BEGIN {OFS="\t"} NR==1{max=$2} {left = (max - $2) / NR; NR==20 ? right = 0: right = (-$2) / (20 - NR) ; print $1 OFS $2 OFS left - right}' > temp
mv temp cluster_counts.tsv

# Currently gets max first-order differenceq
opt_info=( $(awk '{if(max<$3){max=$3;opt_perc=$fin;num_clusters=$2}}END{print opt_perc num_clusters}' cluster_counts.tsv) )

echo "Optimum percentage: ${opt_info[0]}"
echo "Number of clusters: ${opt_info[1]}"

printf "Optimum (?) percentage: %s\nNumber of clusters: %s\n" "${opt_info[0]}" "${opt_info[1]}" >> $input_file.log
echo "Optimum (?) percentage file: ${opt_info[0]}.fa" >> $input_file.log
echo "Run complete: $(date)" >> $input_file.log
